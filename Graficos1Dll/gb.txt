int GameBase::Play(int width, int height, const char* windowName, GLFWmonitor* fullScreen) {
		//Iniciar GLFW
		if (!glfwInit()) {
			std::cout << "GLFW Initialization failed" << std::endl;
			glfwTerminate(); //Si no puede iniciar, entra aca y termina con glfw
			return 1;
		}

		//Seteamos propiedades de la ventana de windows con glfw
	//OpenGL version
	//GLFWWINDOWHINT Setea la version de glfw (3.3)
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
		//Core profile = No tiene compatibilidad con versiones anteriores de GL
		glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
		//Esto setea que haya compatibilidad con versiones mas recientes de GL
		glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

		_window = new Window();
		if (_window != NULL)	{
			_window->StartWindow(width, height, windowName, fullScreen);

			if (!_window->GetWindow()) {
				std::cout << "Fail to create GLFW window" << std::endl;
				glfwTerminate(); //Si la ventana no se pudo crear correctamente, termina con glfw
				return 1;
			}
		}

		int bufferWidth;
		int bufferHeight;
		//Esta funcion setea los pixeles del frame buffer de la ventana en las variables que le pasemos
		//par: GLFWwindow* creada, donde almacenar el largo en pixeles, donde almacenar el alto en pixeles
		//Hay que pasar la referencia en memoria de los buffers
		if (_window != NULL)
			glfwGetFramebufferSize(_window->GetWindow(), &bufferWidth, &bufferHeight);


		//Permitir extensiones modernas;
		glewExperimental = GL_TRUE;

		if (glewInit() != GLEW_OK) {
			std::cout << "Error in Glew Init" << std::endl;
			if(_window!=NULL)
				glfwDestroyWindow(_window->GetWindow()); //Si Glew no puede iniciar, destruimos la ventana que creamos antes
			glfwTerminate();
			return 1;
		}


		_renderer = new Renderer();
		if (!_renderer)
			return -1;


		//Permitir extensiones modernas;
		glewExperimental = GL_TRUE;

		if (_window != NULL) {
			while (_window->CheckIfWindowIsOpen()) {
				if (_renderer != NULL)
					_renderer->Draw();

				if (_window != NULL)
					_window->SwapBuffers();

				glfwPollEvents();
			}
		}
		if (_window != NULL)
			_window->StopWindow();
		return 0;
	}